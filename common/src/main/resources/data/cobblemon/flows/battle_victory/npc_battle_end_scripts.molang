'The v.npc and v.player bits are from before q.set_query existed and are only there for backwards compatibility.';

for_each(t.loser, c.npc_losers, {
  !q.is_blank(t.loser.npc.config.on_defeat) ? {
    v.npc = t.loser.npc;
    q.set_query('npc', t.loser.npc);
    q.run_molang(t.loser.npc.config.on_defeat);
  };
  !q.is_blank(t.loser.npc.config.on_player_wins) ? {
    for_each(t.player_winner, c.player_winners, {
      v.player = t.player_winner.player;
      v.npc = t.loser.npc;
      q.set_query('player', t.player_winner.player);
      q.set_query('npc', t.loser.npc);
      q.run_molang(t.loser.npc.config.on_player_wins);
    });
  };
  !q.is_blank(t.loser.npc.config.player_win_command) ? {
    for_each(t.player_winner, c.player_winners, {
      t.cmd = q.replace(t.loser.npc.config.player_win_command, '{{player}}', t.player_winner.player.username);
      t.cmd = q.replace(t.cmd, '{{player_id}}', t.player_winner.player.uuid);
      t.cmd = q.replace(t.cmd, '{{npc}}', t.loser.npc.name);
      t.cmd = q.replace(t.cmd, '{{npc_id}}', t.loser.npc.uuid);
      q.run_command(t.cmd);
    });
  };
});

for_each(t.winner, c.npc_winners, {
  !q.is_blank(t.winner.npc.config.on_victory) ? {
    v.npc = t.winner.npc;
    q.set_query('npc', t.winner.npc);
    q.run_molang(t.winner.npc.config.on_victory);
  };
  !q.is_blank(t.winner.npc.config.on_player_loses) ? {
    for_each(t.player_loser, c.player_losers, {
      v.player = t.player_loser.player;
      v.npc = t.winner.npc;
      q.set_query('player', t.player_loser.player);
      q.set_query('npc', t.winner.npc);
      q.run_molang(t.winner.npc.config.on_player_loses);
    });
  };
  !q.is_blank(t.winner.npc.config.player_lose_command) ? {
    for_each(t.player_loser, c.player_losers, {
      t.cmd = q.replace(t.winner.npc.config.player_lose_command, '{{player}}', t.player_loser.player.username);
      t.cmd = q.replace(t.cmd, '{{player_id}}', t.player_loser.player.uuid);
      t.cmd = q.replace(t.cmd, '{{npc}}', t.winner.npc.name);
      t.cmd = q.replace(t.cmd, '{{npc_id}}', t.winner.npc.uuid);
      q.run_command(t.cmd);
    });
  };
});

for_each(t.npc_actor, c.npcs, {
  t.npc_actor.npc.config.challenge_cooldown != 0 ? {
    for_each(t.player_actor, c.players, {
      t.data = t.player_actor.player.get_npc_data(t.npc_actor.npc.uuid);
      t.data.last_challenged_time = t.player_actor.player.world.game_time;
      t.player_actor.player.save_data();
    });
  };
});